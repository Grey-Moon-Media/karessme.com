<?php

/**
 * @file
 * Commerce extra items module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Form\ViewsForm;

/**
 * Implements hook_form_alter().
 */
function commerce_extra_items_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /*
   * We need this hook since "extra_item" order item type must be "read-only".
   * The user should not change a quantity of the discounted extra items.
   * Modules like commerce_xquantity could help to avoid the following custom
   * code, but it completely overrides
   * Drupal\commerce_cart\Plugin\views\field\EditQuantity::viewsForm() method,
   * which is not good. See:
   * https://github.com/drugan/commerce_xquantity/blob/8.x-1.x/src/Plugin/views/field/XquantityEditQuantity.php
   *
   * TODO Remove it once #2942475 is resolved.
   * Note: It's highly recommended to resolve #2942475 so it will "lock" and
   * mark as "read-only" "extra_item" order items everywhere on the site.
   * As the following code makes it "read-only" ONLY on the cart form.
   */
  if ($form_state->getFormObject() instanceof ViewsForm) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = reset($form_state->getBuildInfo()['args']);
    $commerce_cart_form = $view->storage->get('tag') == 'commerce_cart_form';
    $quantity_field = isset($view->field['edit_quantity']);

    if ($commerce_cart_form && $quantity_field && !empty($view->result)) {
      foreach ($view->result as $resultRow) {
        $order_item = $view->field['edit_quantity']->getEntity($resultRow);

        if ($order_item && $order_item->bundle() == 'extra_item') {
          $form['edit_quantity'][$resultRow->index]['#disabled'] = TRUE;
          $form['remove_button'][$resultRow->index]['#access'] = FALSE;
        }
      }
    }
  }
}

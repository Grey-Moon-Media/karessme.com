<?php

use Drupal\push_framework\Service;

/**
 * Implements hook_cron().
 */
function push_framework_cron() {
  /** @var \Drupal\push_framework\Service $service */
  $service = Drupal::service('push_framework.service');
  $service->collectAllSourceItems();
  $service->processQueue();
}

/**
 * Implements hook_mail_alter().
 */
function push_framework_mail_alter(&$message) {
  if ($user = user_load_by_mail($message['to'])) {
    /** @var \Drupal\user\UserDataInterface $user_data */
    $user_data = Drupal::service('user.data');
    if ($user_data->get('push_framework', $user->id(), Service::BLOCK_PUSH)) {
      $message['send'] = FALSE;
    }
  }
}

/**
 * Implements hook_token_info().
 */
function push_framework_token_info() {
  $type = [
    'name' => t('Push object'),
    'description' => t('Tokens related to the object the framework is pushing users.'),
    'needs-data' => 'push-object',
  ];
  $tokens['label'] = [
    'name' => t('Label'),
  ];
  $tokens['content'] = [
    'name' => t('Rendered content'),
  ];
  return [
    'types' => ['push-object' => $type],
    'tokens' => ['push-object' => $tokens],
  ];

}

/**
 * Implements hook_tokens().
 */
function push_framework_tokens($type, $tokens, array $data) {
  $replacements = [];
  if ($type === 'push-object' && !empty($data['push-object'])) {
    $pushObject = $data['push-object'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'label':
          $replacements[$original] = $pushObject['label'];
          break;

        case 'content':
          $replacements[$original] = $pushObject['content'];
          break;
      }
    }
  }
  return $replacements;
}

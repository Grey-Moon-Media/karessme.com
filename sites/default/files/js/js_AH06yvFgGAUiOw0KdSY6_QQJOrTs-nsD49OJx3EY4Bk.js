/**
 * @file
 * Holds JavaScript functionality for the jQuery colorpicker widget.
 */

/*global jQuery, Drupal, drupalSettings*/
/*jslint white:true, this, browser:true*/

(function ($, Drupal, drupalSettings) {

  "use strict";

  // This is the conversion function to convert rgb color values to hexadecimal
  // number values.
  function rgb2hex(rgb) {
    var result, numbers;

    result = "";
    numbers = rgb.match(/\d+/g);

    $.each(numbers, function (index) {
      var number;

      number = numbers[index] * 1;
      // Convert to hex.
      number = number.toString(16);
    // Enforce double-digit.
      if (number.length < 2) {
        number = "0" + number;
      }

      result += number;
    });

    return result;
  }

  function initializeCSS(element, key) {

    // Set base CSS settings.
    element.css({
      backgroundImage : "url(" + drupalSettings.jqueryColorpicker.elements[key].background + ")",
      height : "36px",
      width: "36px",
      position: "relative"
    })
    .children(".color_picker").css({
      backgroundImage: "url(" + drupalSettings.jqueryColorpicker.elements[key].background + ")",
      backgroundRepeat: "no-repeat",
      backgroundPosition: "center center",
      height: "30px",
      width: "30px",
      position: "absolute",
      top: "3px",
      left: "3px"
    })
    .children().css({
      display: "none"
    });
  }

  function initializeElement(element) {

    var defaultColor, trigger;

    // Set the display of the label to inline. The reason for this is that
    // clicking on a label element automatically sets the focus on the input.
    // With the jquery colorpicker, this means the colorpicker pops up. When the
    // display isn't set to inline, it extends to 100% width, meaning the
    // clickable area is much bigger than it should be, making the 'invisible'
    // clickable space very large. When it's set to inline, the width of the
    // label is only as wide as the text.
    element.parent().siblings("label").css("display",  "inline");

    element.parent().siblings(".description:first").hide();

    // Next get the background color of the element.
    defaultColor = element.find(".color_picker:first").css("background-color");

    // If the background color is an rgb value, convert it to a hexidecimal
    // number.
    if (defaultColor.match(/rgb/)) {
      defaultColor = rgb2hex(defaultColor);
    }

    // Initialize the colorpicker element. This calls functions provided by the 3rd party code.
    trigger = element.children(".color_picker:first");
    trigger.ColorPicker({
      color: defaultColor,
      onShow: function (colpkr) {
        $(colpkr).fadeIn(500);
        return false;
      },
      onHide: function (colpkr) {
        $(colpkr).fadeOut(500);
        element.find(".color_picker:first").find("input").blur();
        return false;
      },
      onChange: function (hsb, hex) {
        // For jSlint validation.
        hsb = hsb;

        element.find(".color_picker:first").css({
          backgroundColor: "#" + hex
        }).find("input").val("#" + hex).change();
      }
    });
  }

  function inputWatcher(context, htmlID, key) {
    $(context).find(htmlID).once("jquery-colorpicker-input-watcher").each(function () {
      initializeCSS($(this), key);
      initializeElement($(this));
    });
  }

  function removeWatcher(context) {
    $(context).find(".jquery_field_remove_link").once("jquery-colorpicker-remove-watcher").each(function () {
      $(this).click(function () {
        $(this).parents(".jquery_colorpicker:first").find("input:first").val("").parents("tr:first").hide();

        return false;
      });
    });
  }

  function clearWatcher(context) {
    $(context).find(".jquery_field_clear_link").once("jquery-colorpicker-clear-watcher").each(function () {
      $(this).click(function () {
        $(this).parents(".jquery_colorpicker:first").find(".color_picker:first").css("background-color", "#FFFFFF").find("input:first").val("");

        return false;
      });
    });
  }

  function init(context) {
    $.each(drupalSettings.jqueryColorpicker.elements, function (index) {
      // The following gives the ID of the element to will use as a point of
      // reference for the settings.
      var id = "#" + index + "-inner_wrapper";

      inputWatcher(context, id, index);
    });
  }

  Drupal.behaviors.jqueryColorpicker = {
    attach: function (context) {
      init(context);
      removeWatcher(context);
      clearWatcher(context);
    }
  };

}(jQuery, Drupal, drupalSettings));
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, drupalSettings) {
  Drupal.behaviors.machineName = {
    attach: function attach(context, settings) {
      var self = this;
      var $context = $(context);
      var timeout = null;
      var xhr = null;

      function clickEditHandler(e) {
        var data = e.data;
        data.$wrapper.removeClass('visually-hidden');
        data.$target.trigger('focus');
        data.$suffix.hide();
        data.$source.off('.machineName');
      }

      function machineNameHandler(e) {
        var data = e.data;
        var options = data.options;
        var baseValue = $(e.target).val();
        var rx = new RegExp(options.replace_pattern, 'g');
        var expected = baseValue.toLowerCase().replace(rx, options.replace).substr(0, options.maxlength);

        if (xhr && xhr.readystate !== 4) {
          xhr.abort();
          xhr = null;
        }

        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }

        if (baseValue.toLowerCase() !== expected) {
          timeout = setTimeout(function () {
            xhr = self.transliterate(baseValue, options).done(function (machine) {
              self.showMachineName(machine.substr(0, options.maxlength), data);
            });
          }, 300);
        } else {
          self.showMachineName(expected, data);
        }
      }

      Object.keys(settings.machineName).forEach(function (sourceId) {
        var options = settings.machineName[sourceId];
        var $source = $context.find(sourceId).addClass('machine-name-source').once('machine-name');
        var $target = $context.find(options.target).addClass('machine-name-target');
        var $suffix = $context.find(options.suffix);
        var $wrapper = $target.closest('.js-form-item');

        if (!$source.length || !$target.length || !$suffix.length || !$wrapper.length) {
          return;
        }

        if ($target.hasClass('error')) {
          return;
        }

        options.maxlength = $target.attr('maxlength');
        $wrapper.addClass('visually-hidden');
        var machine = $target.val();
        var $preview = $("<span class=\"machine-name-value\">".concat(options.field_prefix).concat(Drupal.checkPlain(machine)).concat(options.field_suffix, "</span>"));
        $suffix.empty();

        if (options.label) {
          $suffix.append("<span class=\"machine-name-label\">".concat(options.label, ": </span>"));
        }

        $suffix.append($preview);

        if ($target.is(':disabled')) {
          return;
        }

        var eventData = {
          $source: $source,
          $target: $target,
          $suffix: $suffix,
          $wrapper: $wrapper,
          $preview: $preview,
          options: options
        };

        if (machine === '' && $source.val() !== '') {
          self.transliterate($source.val(), options).done(function (machineName) {
            self.showMachineName(machineName.substr(0, options.maxlength), eventData);
          });
        }

        var $link = $("<span class=\"admin-link\"><button type=\"button\" class=\"link\">".concat(Drupal.t('Edit'), "</button></span>")).on('click', eventData, clickEditHandler);
        $suffix.append($link);

        if ($target.val() === '') {
          $source.on('formUpdated.machineName', eventData, machineNameHandler).trigger('formUpdated.machineName');
        }

        $target.on('invalid', eventData, clickEditHandler);
      });
    },
    showMachineName: function showMachineName(machine, data) {
      var settings = data.options;

      if (machine !== '') {
        if (machine !== settings.replace) {
          data.$target.val(machine);
          data.$preview.html(settings.field_prefix + Drupal.checkPlain(machine) + settings.field_suffix);
        }

        data.$suffix.show();
      } else {
        data.$suffix.hide();
        data.$target.val(machine);
        data.$preview.empty();
      }
    },
    transliterate: function transliterate(source, settings) {
      return $.get(Drupal.url('machine_name/transliterate'), {
        text: source,
        langcode: drupalSettings.langcode,
        replace_pattern: settings.replace_pattern,
        replace_token: settings.replace_token,
        replace: settings.replace,
        lowercase: true
      });
    }
  };
})(jQuery, Drupal, drupalSettings);;
